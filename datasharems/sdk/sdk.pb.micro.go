// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sdk.proto

package sdk

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/api"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SDK service

func NewSDKEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SDK service

type SDKService interface {
	// SaveInfo 信息上链
	SaveInfo(ctx context.Context, in *SaveInfoRequest, opts ...client.CallOption) (*SaveInfoResponse, error)
	// GetInfo 从链码上获取信息
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	// 通用的调用链码的方法
	Invoke(ctx context.Context, in *InvokeRequest, opts ...client.CallOption) (*InvokeResponse, error)
}

type sDKService struct {
	c    client.Client
	name string
}

func NewSDKService(name string, c client.Client) SDKService {
	return &sDKService{
		c:    c,
		name: name,
	}
}

func (c *sDKService) SaveInfo(ctx context.Context, in *SaveInfoRequest, opts ...client.CallOption) (*SaveInfoResponse, error) {
	req := c.c.NewRequest(c.name, "SDK.SaveInfo", in)
	out := new(SaveInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "SDK.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKService) Invoke(ctx context.Context, in *InvokeRequest, opts ...client.CallOption) (*InvokeResponse, error) {
	req := c.c.NewRequest(c.name, "SDK.Invoke", in)
	out := new(InvokeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SDK service

type SDKHandler interface {
	// SaveInfo 信息上链
	SaveInfo(context.Context, *SaveInfoRequest, *SaveInfoResponse) error
	// GetInfo 从链码上获取信息
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	// 通用的调用链码的方法
	Invoke(context.Context, *InvokeRequest, *InvokeResponse) error
}

func RegisterSDKHandler(s server.Server, hdlr SDKHandler, opts ...server.HandlerOption) error {
	type sDK interface {
		SaveInfo(ctx context.Context, in *SaveInfoRequest, out *SaveInfoResponse) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error
		Invoke(ctx context.Context, in *InvokeRequest, out *InvokeResponse) error
	}
	type SDK struct {
		sDK
	}
	h := &sDKHandler{hdlr}
	return s.Handle(s.NewHandler(&SDK{h}, opts...))
}

type sDKHandler struct {
	SDKHandler
}

func (h *sDKHandler) SaveInfo(ctx context.Context, in *SaveInfoRequest, out *SaveInfoResponse) error {
	return h.SDKHandler.SaveInfo(ctx, in, out)
}

func (h *sDKHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.SDKHandler.GetInfo(ctx, in, out)
}

func (h *sDKHandler) Invoke(ctx context.Context, in *InvokeRequest, out *InvokeResponse) error {
	return h.SDKHandler.Invoke(ctx, in, out)
}
