// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: data.proto

package data

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ShareData service

type ShareDataService interface {
	GetCrySql(ctx context.Context, in *GetCrySqlRequest, opts ...client.CallOption) (*GetCrySqlResponse, error)
	GetDeRes(ctx context.Context, in *GetDeResRequest, opts ...client.CallOption) (*GetDeResResponse, error)
	CrySql(ctx context.Context, in *CrySqlRequest, opts ...client.CallOption) (*CrySqlResponse, error)
	DeRes(ctx context.Context, in *DeResRequest, opts ...client.CallOption) (*DeResResponse, error)
	// operate dump chain code service
	SaveDumpInfo(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error)
	DeleteDumpInfo(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error)
	DeleteTable(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error)
	UpdateDumpInfoOverwrite(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error)
	UpdateDumpInfoOverlay(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error)
	QueryDumpInfo(ctx context.Context, in *QueryDumpInfoByIdRequest, opts ...client.CallOption) (*Response, error)
	QueryDumpAccurateInfo(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error)
	QueryDumpInfoByKeywords(ctx context.Context, in *QueryDumpInfoByKeywordsRequest, opts ...client.CallOption) (*Response, error)
	QueryRecentlyDumpInfo(ctx context.Context, in *QueryRecentlyDumpInfoRequest, opts ...client.CallOption) (*Response, error)
	QueryOwnerDumpInfo(ctx context.Context, in *QueryOwnerDumpInfoRequest, opts ...client.CallOption) (*Response, error)
	GetStepNumber(ctx context.Context, in *GetStepNumberRequest, opts ...client.CallOption) (*GetStepNumberResponse, error)
	QueryPurchased(ctx context.Context, in *QueryPurchasedRequest, opts ...client.CallOption) (*Response, error)
	// sql查询返回结果集
	ViewSqlResult(ctx context.Context, in *ViewSqlResultRequest, opts ...client.CallOption) (*ViewSqlResponse, error)
}

type shareDataService struct {
	c    client.Client
	name string
}

func NewShareDataService(name string, c client.Client) ShareDataService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sharedata"
	}
	return &shareDataService{
		c:    c,
		name: name,
	}
}

func (c *shareDataService) GetCrySql(ctx context.Context, in *GetCrySqlRequest, opts ...client.CallOption) (*GetCrySqlResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.GetCrySql", in)
	out := new(GetCrySqlResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) GetDeRes(ctx context.Context, in *GetDeResRequest, opts ...client.CallOption) (*GetDeResResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.GetDeRes", in)
	out := new(GetDeResResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) CrySql(ctx context.Context, in *CrySqlRequest, opts ...client.CallOption) (*CrySqlResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.CrySql", in)
	out := new(CrySqlResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) DeRes(ctx context.Context, in *DeResRequest, opts ...client.CallOption) (*DeResResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.DeRes", in)
	out := new(DeResResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) SaveDumpInfo(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.SaveDumpInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) DeleteDumpInfo(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.DeleteDumpInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) DeleteTable(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.DeleteTable", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) UpdateDumpInfoOverwrite(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.UpdateDumpInfoOverwrite", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) UpdateDumpInfoOverlay(ctx context.Context, in *DumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.UpdateDumpInfoOverlay", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryDumpInfo(ctx context.Context, in *QueryDumpInfoByIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryDumpInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryDumpAccurateInfo(ctx context.Context, in *KeyDumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryDumpAccurateInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryDumpInfoByKeywords(ctx context.Context, in *QueryDumpInfoByKeywordsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryDumpInfoByKeywords", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryRecentlyDumpInfo(ctx context.Context, in *QueryRecentlyDumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryRecentlyDumpInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryOwnerDumpInfo(ctx context.Context, in *QueryOwnerDumpInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryOwnerDumpInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) GetStepNumber(ctx context.Context, in *GetStepNumberRequest, opts ...client.CallOption) (*GetStepNumberResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.GetStepNumber", in)
	out := new(GetStepNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) QueryPurchased(ctx context.Context, in *QueryPurchasedRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ShareData.QueryPurchased", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDataService) ViewSqlResult(ctx context.Context, in *ViewSqlResultRequest, opts ...client.CallOption) (*ViewSqlResponse, error) {
	req := c.c.NewRequest(c.name, "ShareData.ViewSqlResult", in)
	out := new(ViewSqlResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShareData service

type ShareDataHandler interface {
	GetCrySql(context.Context, *GetCrySqlRequest, *GetCrySqlResponse) error
	GetDeRes(context.Context, *GetDeResRequest, *GetDeResResponse) error
	CrySql(context.Context, *CrySqlRequest, *CrySqlResponse) error
	DeRes(context.Context, *DeResRequest, *DeResResponse) error
	// operate dump chain code service
	SaveDumpInfo(context.Context, *DumpInfoRequest, *Response) error
	DeleteDumpInfo(context.Context, *KeyDumpInfoRequest, *Response) error
	DeleteTable(context.Context, *KeyDumpInfoRequest, *Response) error
	UpdateDumpInfoOverwrite(context.Context, *DumpInfoRequest, *Response) error
	UpdateDumpInfoOverlay(context.Context, *DumpInfoRequest, *Response) error
	QueryDumpInfo(context.Context, *QueryDumpInfoByIdRequest, *Response) error
	QueryDumpAccurateInfo(context.Context, *KeyDumpInfoRequest, *Response) error
	QueryDumpInfoByKeywords(context.Context, *QueryDumpInfoByKeywordsRequest, *Response) error
	QueryRecentlyDumpInfo(context.Context, *QueryRecentlyDumpInfoRequest, *Response) error
	QueryOwnerDumpInfo(context.Context, *QueryOwnerDumpInfoRequest, *Response) error
	GetStepNumber(context.Context, *GetStepNumberRequest, *GetStepNumberResponse) error
	QueryPurchased(context.Context, *QueryPurchasedRequest, *Response) error
	// sql查询返回结果集
	ViewSqlResult(context.Context, *ViewSqlResultRequest, *ViewSqlResponse) error
}

func RegisterShareDataHandler(s server.Server, hdlr ShareDataHandler, opts ...server.HandlerOption) error {
	type shareData interface {
		GetCrySql(ctx context.Context, in *GetCrySqlRequest, out *GetCrySqlResponse) error
		GetDeRes(ctx context.Context, in *GetDeResRequest, out *GetDeResResponse) error
		CrySql(ctx context.Context, in *CrySqlRequest, out *CrySqlResponse) error
		DeRes(ctx context.Context, in *DeResRequest, out *DeResResponse) error
		SaveDumpInfo(ctx context.Context, in *DumpInfoRequest, out *Response) error
		DeleteDumpInfo(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error
		DeleteTable(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error
		UpdateDumpInfoOverwrite(ctx context.Context, in *DumpInfoRequest, out *Response) error
		UpdateDumpInfoOverlay(ctx context.Context, in *DumpInfoRequest, out *Response) error
		QueryDumpInfo(ctx context.Context, in *QueryDumpInfoByIdRequest, out *Response) error
		QueryDumpAccurateInfo(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error
		QueryDumpInfoByKeywords(ctx context.Context, in *QueryDumpInfoByKeywordsRequest, out *Response) error
		QueryRecentlyDumpInfo(ctx context.Context, in *QueryRecentlyDumpInfoRequest, out *Response) error
		QueryOwnerDumpInfo(ctx context.Context, in *QueryOwnerDumpInfoRequest, out *Response) error
		GetStepNumber(ctx context.Context, in *GetStepNumberRequest, out *GetStepNumberResponse) error
		QueryPurchased(ctx context.Context, in *QueryPurchasedRequest, out *Response) error
		ViewSqlResult(ctx context.Context, in *ViewSqlResultRequest, out *ViewSqlResponse) error
	}
	type ShareData struct {
		shareData
	}
	h := &shareDataHandler{hdlr}
	return s.Handle(s.NewHandler(&ShareData{h}, opts...))
}

type shareDataHandler struct {
	ShareDataHandler
}

func (h *shareDataHandler) GetCrySql(ctx context.Context, in *GetCrySqlRequest, out *GetCrySqlResponse) error {
	return h.ShareDataHandler.GetCrySql(ctx, in, out)
}

func (h *shareDataHandler) GetDeRes(ctx context.Context, in *GetDeResRequest, out *GetDeResResponse) error {
	return h.ShareDataHandler.GetDeRes(ctx, in, out)
}

func (h *shareDataHandler) CrySql(ctx context.Context, in *CrySqlRequest, out *CrySqlResponse) error {
	return h.ShareDataHandler.CrySql(ctx, in, out)
}

func (h *shareDataHandler) DeRes(ctx context.Context, in *DeResRequest, out *DeResResponse) error {
	return h.ShareDataHandler.DeRes(ctx, in, out)
}

func (h *shareDataHandler) SaveDumpInfo(ctx context.Context, in *DumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.SaveDumpInfo(ctx, in, out)
}

func (h *shareDataHandler) DeleteDumpInfo(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.DeleteDumpInfo(ctx, in, out)
}

func (h *shareDataHandler) DeleteTable(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.DeleteTable(ctx, in, out)
}

func (h *shareDataHandler) UpdateDumpInfoOverwrite(ctx context.Context, in *DumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.UpdateDumpInfoOverwrite(ctx, in, out)
}

func (h *shareDataHandler) UpdateDumpInfoOverlay(ctx context.Context, in *DumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.UpdateDumpInfoOverlay(ctx, in, out)
}

func (h *shareDataHandler) QueryDumpInfo(ctx context.Context, in *QueryDumpInfoByIdRequest, out *Response) error {
	return h.ShareDataHandler.QueryDumpInfo(ctx, in, out)
}

func (h *shareDataHandler) QueryDumpAccurateInfo(ctx context.Context, in *KeyDumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.QueryDumpAccurateInfo(ctx, in, out)
}

func (h *shareDataHandler) QueryDumpInfoByKeywords(ctx context.Context, in *QueryDumpInfoByKeywordsRequest, out *Response) error {
	return h.ShareDataHandler.QueryDumpInfoByKeywords(ctx, in, out)
}

func (h *shareDataHandler) QueryRecentlyDumpInfo(ctx context.Context, in *QueryRecentlyDumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.QueryRecentlyDumpInfo(ctx, in, out)
}

func (h *shareDataHandler) QueryOwnerDumpInfo(ctx context.Context, in *QueryOwnerDumpInfoRequest, out *Response) error {
	return h.ShareDataHandler.QueryOwnerDumpInfo(ctx, in, out)
}

func (h *shareDataHandler) GetStepNumber(ctx context.Context, in *GetStepNumberRequest, out *GetStepNumberResponse) error {
	return h.ShareDataHandler.GetStepNumber(ctx, in, out)
}

func (h *shareDataHandler) QueryPurchased(ctx context.Context, in *QueryPurchasedRequest, out *Response) error {
	return h.ShareDataHandler.QueryPurchased(ctx, in, out)
}

func (h *shareDataHandler) ViewSqlResult(ctx context.Context, in *ViewSqlResultRequest, out *ViewSqlResponse) error {
	return h.ShareDataHandler.ViewSqlResult(ctx, in, out)
}
